core

let Y : ? -> ? = \f : ?. (\x : ?. (f : ? => ? -> ?) (x : ? => ? -> ? x)) (\x : ?. \y : ?. ((f : ? => ? -> ?) (x : ? => ? -> ? x) : ? => ? -> ?) y : ? -> ? -> ? => ?)
 in let not : ? -> bool = \b : ?. if (b : ? => bool) then
   false
 else
   true
  in let loop : ? = Y (\loop : ?. \b : ?. if (b : ? => bool) then
    true : bool => ?
  else
    (loop : ? => bool -> ?) (not b) : ? -> ? -> ? => ?)
   in (loop : ? => bool -> ?) false : ?
   
   