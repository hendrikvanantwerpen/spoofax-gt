let Y = \f. ((\x. f (x x)) (\x. \y. f (x x) y)) in
let not = \b. if b then false else true in
let nil : ? = unit in
let cons : ? -> ? -> ? = \h. \t. (h,t) in
let isnil = \l. (isunit l) in
let iscons = \l. (ispair l) in
let head = \l. fst l in
let tail = \l. snd l in
let map = Y (\map. \f. \l. if isnil l then nil else cons (f (head l)) (map f (tail l))) in
(map not (cons true (cons false nil)))