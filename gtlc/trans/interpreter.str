module interpreter

imports signatures/gtlc-sig
imports signatures/gtlc-core-sig
imports signatures/types-sig
imports signatures/values-sig
imports elaborate
    
rules // eval programs

  eval :
    p@Expr(e) -> v
    where debug(!"eval: ")
    where <insertCasts; strip-annos <+ debug(!"insertCasts failed: "); fail> p => p'
        ; <eval> p' => v

  eval :
    p@ExprV(e, _) -> v
    where debug(!"eval: ")
    where <insertCasts; strip-annos <+ debug(!"insertCasts failed: "); fail> p => p'
        ; <eval> p' => v
       
  eval :
    ExprC(e) -> ExprCV(e, v)
    where debug(!"eval: ")
    where <eval(|[]) <+ Exc <+ debug(!"evaluation failed: ")> e => v 
       
  eval :
    ExprCV(e, _) -> ExprCV(e, v)
    where debug(!"eval: ")
    where <eval(|[]) <+ Exc <+ debug(!"evaluation failed: ")> e => v 

  eval : 
    Elaborate(e1, e2) -> ExprCV(e2, v)
    where debug(!"eval: ")
    where <eval(|[]) <+ Exc <+ debug(!"evaluation failed: ")> e2 => v 
    

rules // casting 

  eval(|E) : 
    AscrC(e, _) -> <eval(|E)> e // todo: check type // MMG: no actual need---the type checker has done it. CastC will do the checks
    where debug(!"eval: ")
    // so should we remove ascriptions from the program during cast insertion?
    // probably better to keep them around---it's handy to be able to make assertions
    
  eval(|E) : 
    CastC(e, T, S) -> <castc(|E)> (<eval(|E)>e, T, S)
    where debug(!"eval: ")
  
  castc(|E) :
    (v, T, T) -> v
    where debug(!"castc: ")
     
  castc(|E) :
    (UnitV(), UnitT(), DynT()) -> DynV(UnitV())
    where debug(!"castc: ")

  castc(|E) :
    (DynV(UnitV()), DynT(), UnitT()) -> UnitV()
    where debug(!"castc: ")
      
  castc(|E) :
    (BoolV(b), BoolT(), DynT()) -> DynV(BoolV(b))    
    where debug(!"castc: ")

  castc(|E) :
    (DynV(BoolV(b)), DynT(), BoolT()) -> BoolV(b)      
    where debug(!"castc: ")
  
  castc(|E) :
    (PairV(v1, v2), PairT(T1, T2), DynT()) -> DynV(PairV(v1_dyn, v2_dyn))
    where debug(!"castc: ")
        ; <castc(|E)> (v1, T1, DynT()) => v1_dyn
        ; <castc(|E)> (v2, T2, DynT()) => v2_dyn
        
  castc(|E) :
    (DynV(PairV(v1, v2)), DynT(), PairT(T1, T2)) -> PairV(v1_cast, v2_cast)
    where debug(!"castc: ")
        ; <castc(|E)> (v1, DynT(), T1) => v1_cast
        ; <castc(|E)> (v2, DynT(), T2) => v2_cast
        
  castc(|E) :
    (PairV(v1, v2), PairT(T11, T12), PairT(T21, T22)) -> PairV(v1_cast, v2_cast)
    where debug(!"castc: ")
        ; <castc(|E)> (v1, T11, T21) => v1_cast
        ; <castc(|E)> (v2, T12, T22) => v2_cast
   
  // we use explicit function proxies FunProxyV for 
  //   (a) legibility/debuggability
  //   (b) so we can do space-efficiency if we want
    
  castc(|E) :
    (v, FunT(T11, T12), FunT(T21, T22)) -> FunProxyV(v, T11, T12, T21, T22)
    where debug(!"castc: ")
    
  castc(|E) :
    (v, FunT(T11, T12), DynT()) -> DynV(v_dyn)
    where debug(!"castc: ")
        ; <castc(|E)> (v, FunT(T11, T12), FunT(DynT(), DynT())) => v_dyn

  castc(|E) :
    (DynV(v), DynT(), FunT(T21, T22)) -> FunProxyV(v, DynT(), DynT(), T21, T22)
    where debug(!"castc: ")
    
  // the Siek and Taha rule for references is a little bonkers:
  //
  // e => v   v is a ref t
  // ---------------------
  // <ref t> e => v
  //
  // like... how do they know what type is in the ref?
  //
  // Herman Tomb Flanagan give a much more sensible semantics, with explicit proxies
  // we then use these proxies in the opsem, just like FunProxyV
    
  castc(|E) : 
    (v, RefT(T1), RefT(T2)) -> RefProxyV(v, T1, T2)
    where debug(!"castc: ")
  
  castc(|E) :
    (v, RefT(T), DynT()) -> DynV(v_dyn)
    where debug(!"castc: ")
        ; <castc(|E)> (v, RefT(T), RefT(DynT())) => v_dyn
  
  castc(|E) :
    (DynV(v), DynT(), RefT(T)) -> RefProxyV(v, DynT(), T)
    where debug(!"castc: ")
 
  // cast fails 
  
  castc(|E) : 
    (v, T1, T2) -> <fail>
    where debug(!"castc fails: ")
    where rules( Exc: _ -> BlameV(<double-quote>"error", v, T1, T2) ) 
        
rules // eval expressions
 
  eval(|E) : 
    UnitC() -> UnitV()
    where debug(!"eval: ")

  eval(|E) : 
    TrueC() -> BoolV(True())
    where debug(!"eval: ")

  eval(|E) : 
    FalseC() -> BoolV(False())
    where debug(!"eval: ")

  eval(|E) :
    PairC(e1, e2) -> PairV(v1, v2)
    where debug(!"eval: ")
        ; <eval(|E)> e1 => v1
        ; <eval(|E)> e2 => v2
        
  eval(|E) :
    FstC(e) -> v1
    where debug(!"eval: ")
        ; <eval(|E)> e => PairV(v1, v2)

  eval(|E) :
    SndC(e) -> v2
    where debug(!"eval: ")
        ; <eval(|E)> e => PairV(v1, v2)


  eval(|E) : 
    IfC(e1, e2, e3) -> <ifc(|E)>(<eval(|E)> e1, e2, e3)
    where debug(!"eval: ")
    
  ifc(|E) :
    (BoolV(True()), e1, e2) -> <eval(|E)> e1
    where debug(!"ifc: ")
    
  ifc(|E) :
    (BoolV(False()), e1, e2) -> <eval(|E)> e2
    where debug(!"ifc: ")
    
  eval(|E) : 
    VarC(x) -> <lookup(|x)> E
    where debug(!"eval: ")
    
  eval(|E) :
    LamC(x, _, e) -> FunV(x, e, E)
    where debug(!"eval: ")
    
  eval(|E) : 
    AppC(e1, e2) -> v_res
    where debug(!"eval: ")
    where <eval(|E)> e1 => v_fun
        ; <eval(|E)> e2 => v_arg
        ; <appc(|E)> (v_fun, v_arg) => v_res

  appc(|E) :
    (FunV(x, e, E'), v_arg) -> v_res
    where debug(!"app: ")
        ; <eval(|[Bind(x, v_arg) | E'])> e => v_res
        
  appc(|E) :
    (FunProxyV(v_fun, T11, T12, T21, T22), v_arg) -> v_res_cast
    where debug(!"app: ")
        ; <castc(|E)> (v_arg, T21, T11) => v_arg_cast
        ; <appc(|E)> (v_fun, v_arg_cast) => v_res
        ; <castc(|E)> (v_res, T12, T22) => v_res_cast
    
  eval(|E) :
    RefC(e) -> RefV(loc)
    where debug(!"eval: ")
    where <eval(|E)> e => v
        ; new => loc
        ; rules( Store : loc -> v )
        
  eval(|E) : 
    DerefC(e) -> v'
    where debug(!"eval: ")
    where <eval(|E)> e => v
    where <derefc(|E)> v => v'

//  original    
//  eval(|E) : 
//    DerefC(e) -> v
//    where debug(!"eval: ")
//    where <derefc(|E)> e => v
  
  derefc(|E) :
    RefV(loc) -> v
    where debug(!"derefc: ")
        ; <Store> loc => v

  derefc(|E) : 
    RefProxyV(v, T1, T2) -> v_cast
    where debug(!"derefc: ")
        ; <derefc(|E)> v => v_res
        ; <castc(|E)> (v_res, T1, T2) => v_cast
        
  derefc(|E) : 
    RefProxyV(v, T1, T2) -> <fail>
    where rules( Exc : _ -> BlameV(<double-quote>"deref error", v, T1, T2) )
        
  eval(|E) : 
    SetC(e1, e2) -> v_res
    where debug(!"eval: ")
    where <eval(|E)> e1 => v_ref
        ; <eval(|E)> e2 => v_val
        ; <setc(|E)> (v_ref, v_val) => v_res

  setc(|E) :
    (RefV(loc), v) -> UnitV()
    where debug(!"setc: ")
        ; rules( Store : loc -> v)

  setc(|E) :
    (RefProxyV(v_loc, T1, T2), v_val) -> v_res
    where debug(!"setc: ")
        ; <castc(|E)> (v_val, T2, T1) => v_cast_val
        ; <setc(|E)> (v_loc, v_cast_val) => v_res
        
  eval(|E) :
    SeqC(e1, e2) -> v
    where debug(!"eval: ")
    where <eval(|E)> e1 => _
        ; <eval(|E)> e2 => v
        
  eval(|E) :
    LetC(x, t, e1, e2) -> v2
    where debug(!"eval: ")
    where <eval(|E)> e1 => v1
        ; debug(!"let var: ")
        ; <eval(|[Bind(x, v1) | E])> e2 => v2
        
//  eval(|E) :
//    e -> <fail>
//    where debug(!"eval is stuck: ")
//    where rules( Exc : _ -> StuckV(e, E) )
    
rules

  lookup(|x) :
    [Bind(x, v) | E] -> v
  lookup(|x) :
    [Bind(y, _) | E] -> <lookup(|x)> E
    where <not(eq)>(x, y)
      
  
    