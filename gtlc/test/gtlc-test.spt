module test

language gtlc

test parse [[
 x
]] 1 error

test true [[
 true
]] 0 errors

test true [[
 \x.x
]] 0 errors

test true [[
  let x = (true, unit) in
    if fst x then snd x else unit
]] 0 errors

//test errro [[
//  (\x . x) (true : ? -> ?)
//]] 1 errors

test foo [[  
  core {
    true
  }
]] 0 errors

test static type mismatch error [[
  (\x : bool. if x then false else true) (\y. y)  
]] >=1 errors // these seem to be really the SAME error :(

test static consistency error [[
  (\x . x) (true : ? -> ?)
]] 1 errors 

test static binding error [[
  (\x. x) y
]] >=1 errors // cascading problem?

test fst parsing error [[
let f = \x . x in 
fst f (true, false) 
]] >=1 errors // cascading typing error

test incorrect elaboration [[
(\x. if x then
  false
else
  true) \y. y

elaborate as

(\x : bool. if x then
  true
else
  true) ((\y : ?. y) : ? -> ? => ?)
]] 1 errors

test core type mismatch error [[  
  core {
    true : ?
  }
]] 1 errors

test core type mismatch error #2 [[
core {

let x : ? = true
 in
  fst (x : ? => (?, ?)) : ? => ?

}
]] 1 errors

test true [[
 true
]] run eval to ExprCV(_, BoolV(True()))


