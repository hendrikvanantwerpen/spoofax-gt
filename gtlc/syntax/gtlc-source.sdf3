module gtlc-source

imports Common types gtlc-core

sorts Expr context-free syntax
  
  Expr = <(<Expr>)> { bracket }
  
  Expr.Core = <core { <ExprC> }>
  
  Expr.Ascr = <<Expr> : <Type>>

  Expr.Unit  = <unit>
  
  // booleans

  Expr.True  = <true>
  
  Expr.False = <false>
  
  Expr.If = <
    if <Expr> then 
      <Expr> 
    else 
      <Expr>
  >
  
  // pairs

  Expr.Pair = <(<Expr>, <Expr>)>
  
  Expr.Fst    = <fst <Expr>>
  Expr.Snd    = <snd <Expr>>
  Expr.IsUnit = <isunit <Expr>>
  Expr.IsBool = <isbool <Expr>>
  Expr.IsPair = <ispair <Expr>>
  Expr.IsRef  = <isref <Expr>>
  Expr.IsFun  = <isfun <Expr>>
  
  // functions 
 
  Expr.App  = <<Expr> <Expr>> { left }
    
  Expr.Lam  = <
    \\<ID> : <Type>. <Expr>
  >
  
  Expr.LamD = <
    \\<ID>. <Expr>
  >
  
  // bindings
  
  Expr.Var  = <<ID>>
  
  Expr.LetD  = <
    let <ID> = <Expr> in 
    <Expr>
  >
  
  Expr.Let  = <
    let <ID> : <Type> = <Expr> in
    <Expr>
  >
  
  // references
  
  Expr.Ref  = <ref <Expr>>
  
  Expr.Deref = <!<Expr>>
  
  Expr.Set  = <<Expr> := <Expr>> {non-assoc}
  
  Expr.Seq  = <
    <Expr>; 
    <Expr>
  > {right}
  
context-free priorities

   {Expr.Fst Expr.Snd Expr.IsUnit 
    Expr.IsBool Expr.IsPair 
    Expr.IsRef Expr.IsFun
    Expr.Ref Expr.Deref}
  > Expr.App
  > Expr.Set
  > Expr.If
  > Expr.Seq
  > {Expr.LamD Expr.Lam}
  > {Expr.Let Expr.LetD}
  > Expr.Ascr
  > Expr.Core
  
template options

  ID = keyword { reject }
  keyword -/- [a-zA-Z0-9]
  
  
// context-free syntax // not in the source language
  //  Expr.Cast = <<Expr> : <Type> =\> <Type>>