module gtlc-core

imports Common types

sorts ExprC context-free syntax 
  ExprC       = <(<ExprC>)> { bracket }
  ExprC.VarC  = <<ID>>
  ExprC.AppC  = <<ExprC> <ExprC>> {left}
  ExprC.LamC  = <\\<ID> : <Type>. <ExprC>>
  ExprC.LetC  = <
    let <ID> : <Type> = <ExprC> in
    <ExprC>
  >
context-free priorities    
  ExprC.AppC > ExprC.LamC > ExprC.LetC
context-free syntax  // booleans
  ExprC.TrueC  = <true> 
  ExprC.FalseC = <false> 
  ExprC.IfC = <
    if <ExprC> then 
      <ExprC> 
    else 
      <ExprC>
  >
context-free priorities 
  ExprC.AppC > ExprC.IfC > ExprC.LamC
  
context-free syntax 
  
  ExprC.AscrC  = <<ExprC> : <Type>>
  
  ExprC.CastC  = [[ExprC] : [Type] => [Type]]

  ExprC.UnitC  = <unit>
  
  // pairs 
  
  ExprC.PairC = <(<ExprC>, <ExprC>)>
  
  ExprC.FstC    = <fst <ExprC>>
  ExprC.SndC    = <snd <ExprC>>
  ExprC.IsUnitC = <isunit <ExprC>>
  ExprC.IsBoolC = <isbool <ExprC>>
  ExprC.IsPairC = <ispair <ExprC>>
  ExprC.IsRefC  = <isref <ExprC>>
  ExprC.IsFunC  = <isfun <ExprC>>
  
  // numbers
  
  ExprC.IntC = <<INT>>
  
  // arithmetic
  ExprC.PlusC = <<ExprC> + <ExprC>>
  ExprC.MinusC = <<ExprC> - <ExprC>>
  ExprC.EqC = <<ExprC> == <ExprC>>
  
  // references
  
  ExprC.RefC  = <ref <ExprC>>
  
  ExprC.DerefC = <!<ExprC>>
  
  ExprC.SetC  = <<ExprC> := <ExprC>> {non-assoc}
  
  ExprC.SeqC  = <
    <ExprC>; 
    <ExprC>
  > {right}
  
context-free priorities
    
   {ExprC.FstC ExprC.SndC ExprC.IsUnitC 
    ExprC.IsBoolC ExprC.IsPairC 
    ExprC.IsRefC ExprC.IsFunC
    ExprC.RefC ExprC.DerefC}
  > ExprC.AppC 
  > ExprC.SetC
  > ExprC.IfC
  > ExprC.SeqC  
  > ExprC.LamC
  > ExprC.LetC
  > ExprC.CastC
  > ExprC.AscrC
  
template options

  ID = keyword { reject }
  keyword -/- [a-zA-Z0-9]