module gtlc-core

imports Common types

sorts ExprC context-free syntax
  
  ExprC        = <(<ExprC>)> { bracket }
  
  ExprC.AscrC  = <<ExprC> : <Type>>
  
  ExprC.CastC  = <<ExprC> : <Type> =\> <Type>>

  ExprC.UnitC   = <unit>

  ExprC.TrueC  = <true>
  
  ExprC.FalseC = <false>
  
  ExprC.PairC = <(<ExprC>, <ExprC>)>
  
  ExprC.FstC = <fst <ExprC>>
  ExprC.SndC = <snd <ExprC>>
  ExprC.IsUnitC = <isunit <ExprC>>
  ExprC.IsBoolC = <isbool <ExprC>>
  ExprC.IsPairC = <ispair <ExprC>>
  ExprC.IsRefC = <isref <ExprC>>
  ExprC.IsFunC = <isfun <ExprC>>
  
  ExprC.IfC = <
    if <ExprC> then 
      <ExprC> 
    else 
      <ExprC>
  >
 
  ExprC.AppC  = <<ExprC> <ExprC>> { left }
    
  ExprC.LamC  = <\\<ID> : <Type>. <ExprC>>
    
  ExprC.VarC  = <<ID>>
  
  ExprC.RefC  = <ref <ExprC>>
  
  ExprC.DerefC = <!<ExprC>>
  
  ExprC.SetC  = <<ExprC> := <ExprC>> {non-assoc}
  
  ExprC.SeqC  = <
    <ExprC>; 
    <ExprC>
  > {right}
  
  ExprC.LetC  = <
    let <ID> : <Type> = <ExprC> 
     in <ExprC>
  >
  
context-free priorities

    ExprC.AppC
  > {ExprC.FstC ExprC.SndC ExprC.IsUnitC ExprC.IsBoolC ExprC.IsPairC ExprC.IsRefC ExprC.IsFunC}
  > ExprC.CastC
  > ExprC.LamC
  > {ExprC.RefC ExprC.DerefC}
  > ExprC.SetC
  > ExprC.IfC
  > ExprC.SeqC
  > ExprC.LetC
  > ExprC.AscrC
  
template options

  ID = keyword { reject }
  keyword -/- [a-zA-Z0-9]